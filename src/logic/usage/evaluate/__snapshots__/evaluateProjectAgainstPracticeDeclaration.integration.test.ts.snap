// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice which reference project variables in the declared contents and custom checks 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {
            "infrastructureNamespaceId": "abcde12345",
            "organizationName": "awesome-org",
            "serviceName": "svc-awesome-thing",
            "slackReleaseWebHook": "https://...",
          },
          "relativeFilePath": "package.json",
          "required": true,
        },
        "fix": null,
        "path": "package.json",
        "practiceRef": "serverless.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "CUSTOM",
      },
    ],
    "path": "package.json",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CUSTOM",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "serverless.yml",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
        ],
        "name": "serverless",
        "readme": null,
      },
      "name": "serverless",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "service: svc-awesome-thing

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10
  stage: \${opt:stage}
  stackTags:
    app: awesome-org
    environment: \${self:provider.stage}
    product: \${self:service}
  environment:
    SERVERLESS_STAGE: \${self:provider.stage}
    NODE_ENV: \${self:custom.stageToNodeEnvMapping.\${self:provider.stage}}
  deploymentBucket: serverless-deployment-abcde12345-\${self:provider.stage}
  vpc:
    securityGroupIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSecurityGroupId}
    subnetIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet1Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet2Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet3Id}
  iamRoleStatements:
    ## paramstore access
    - Effect: 'Allow'
      Action: 'ssm:DescribeParameters'
      Resource: '*'
    - Effect: 'Allow'
      Action: 'ssm:GetParameters'
      Resource: arn:aws:ssm:\${aws:region}:\${aws:accountId}:parameter/*
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource: arn:aws:kms:\${aws:region}:\${aws:accountId}:alias/aws/ssm*
    ## allow invocation of other lambdas
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

custom:
  stageToNodeEnvMapping:
    test: 'test'
    dev: 'development'
    prod: 'production'

functions:
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {
            "infrastructureNamespaceId": "abcde12345",
            "organizationName": "awesome-org",
            "serviceName": "svc-awesome-thing",
            "slackReleaseWebHook": "https://...",
          },
          "relativeFilePath": "serverless.yml",
          "required": true,
        },
        "fix": null,
        "path": "serverless.yml",
        "practiceRef": "serverless.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "CONTAINS",
      },
    ],
    "path": "serverless.yml",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CUSTOM",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "serverless.yml",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
        ],
        "name": "serverless",
        "readme": null,
      },
      "name": "serverless",
    },
    "result": "PASS",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice which references project practices in the declared contents function for a contains check 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "{
  "scripts": {
    "fix:format": "npm run fix:format:prettier && npm run fix:format:terraform",
    "test:format": "npm run test:format:prettier && npm run test:format:terraform"
  }
}",
          "getProjectRootDirectory": [Function],
          "projectPractices": [
            "terraform",
          ],
          "projectVariables": {},
          "relativeFilePath": "package.json",
          "required": true,
        },
        "fix": [Function],
        "path": "package.json",
        "practiceRef": "format.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected toContain[39m
[31m+ Received relevantKeys[39m

[2m  {[22m
[32m-   "scripts": {[39m
[32m-     "fix:format": "npm run fix:format:prettier && npm run fix:format:terraform",[39m
[32m-     "test:format": "npm run test:format:prettier && npm run test:format:terraform"[39m
[32m-   }[39m
[31m+   "scripts": {}[39m
[2m  }[22m",
        "required": true,
        "result": "FAIL",
        "type": "CONTAINS",
      },
    ],
    "path": "package.json",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
        ],
        "name": "format",
        "readme": null,
      },
      "name": "format",
    },
    "result": "FAIL",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice with both a best practice and bad practices 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "package.json",
          "required": true,
        },
        "fix": null,
        "path": "package.json",
        "practiceRef": "dates-and-times.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "CUSTOM",
      },
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "package.json",
          "required": true,
        },
        "fix": null,
        "path": "package.json",
        "practiceRef": "dates-and-times.bad-practice.moment",
        "purpose": "BAD_PRACTICE",
        "reason": null,
        "required": true,
        "result": "FAIL",
        "type": "CUSTOM",
      },
    ],
    "path": "package.json",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": null,
              "pathGlob": "package.json",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "CUSTOM",
            },
          ],
          "name": "moment",
          "readme": "using \`moment\` is a bad practice because it has a weird api that "mutates" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CUSTOM",
          },
        ],
        "name": "dates-and-times",
        "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
      },
      "name": "dates-and-times",
    },
    "result": "FAIL",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice with only a best practice 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "*.md
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": ".prettierignore",
          "required": true,
        },
        "fix": [Function],
        "path": ".prettierignore",
        "practiceRef": "prettier.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected toEqual[39m
[31m+ Received[39m

[32m- *.md[39m
[31m+ .js[39m
",
        "required": true,
        "result": "FAIL",
        "type": "EQUALS",
      },
    ],
    "path": ".prettierignore",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": ".prettierignore",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "prettier.config.js",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "prettier",
        "readme": null,
      },
      "name": "prettier",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "{
  "devDependencies": {
    "prettier": "@declapract{check.minVersion('2.0.0')}"
  },
  "scripts": {
    "format": "prettier --write '**/*.ts' --config ./prettier.config.js"
  }
}
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "package.json",
          "required": true,
        },
        "fix": null,
        "path": "package.json",
        "practiceRef": "prettier.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "CONTAINS",
      },
    ],
    "path": "package.json",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": ".prettierignore",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "prettier.config.js",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "prettier",
        "readme": null,
      },
      "name": "prettier",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "// ref: http://json.schemastore.org/prettierrc

module.exports = {
  trailingComma: 'all',
  tabWidth: 2,
  singleQuote: true,
  printWidth: 150,
};
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "prettier.config.js",
          "required": true,
        },
        "fix": [Function],
        "path": "prettier.config.js",
        "practiceRef": "prettier.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected toEqual[39m
[31m+ Received[39m

[2m  // ref: http://json.schemastore.org/prettierrc[22m

[2m  module.exports = {[22m
[2m    trailingComma: 'all',[22m
[32m-   tabWidth: 2,[39m
[31m+   tabWidth: 4,[39m
[2m    singleQuote: true,[22m
[2m    printWidth: 150,[22m
[2m  };[22m
",
        "required": true,
        "result": "FAIL",
        "type": "EQUALS",
      },
    ],
    "path": "prettier.config.js",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": ".prettierignore",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "prettier.config.js",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "prettier",
        "readme": null,
      },
      "name": "prettier",
    },
    "result": "FAIL",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice with wildcard glob pattern path file checks - fails best and bad practices 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/contract/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/contract/**/*.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/contract/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "import { invokeLambdaFunction } from 'simple-lambda-client';
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/clients/coolServiceClient.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/clients/coolServiceClient.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected toContain[39m
[31m+ Received[39m

[32m- import { invokeLambdaFunction } from 'simple-lambda-client';[39m
[31m+ // does not have the import that the check says it wants[39m
",
        "required": false,
        "result": "FAIL",
        "type": "CONTAINS",
      },
    ],
    "path": "src/data/clients/coolServiceClient.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/dao/**/*.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/dao/**/*.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/data/dao/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/constants.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/domain/constants.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/constants.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/objects/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/objects/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/objects/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/logic/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/logic/**/*.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/logic/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/model/someFile.ts",
          "required": true,
        },
        "fix": [Function],
        "path": "src/model/someFile.ts",
        "practiceRef": "directory-structure-src.bad-practice.model-dir",
        "purpose": "BAD_PRACTICE",
        "reason": null,
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/model/someFile.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/services/someFile.ts",
          "required": true,
        },
        "fix": [Function],
        "path": "src/services/someFile.ts",
        "practiceRef": "directory-structure-src.bad-practice.services-dir",
        "purpose": "BAD_PRACTICE",
        "reason": null,
        "required": true,
        "result": "FAIL",
        "type": "EXISTS",
      },
    ],
    "path": "src/services/someFile.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "FAIL",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice with wildcard glob pattern path file checks - passes with optionals 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/contract/handlers/doSomething.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/contract/handlers/doSomething.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/contract/handlers/doSomething.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "import { invokeLambdaFunction } from 'simple-lambda-client';
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/clients/svcAwesomeStuff.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/clients/svcAwesomeStuff.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "CONTAINS",
      },
    ],
    "path": "src/data/clients/svcAwesomeStuff.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/dao/superCoolThingDao/index.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/dao/superCoolThingDao/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/data/dao/superCoolThingDao/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/constants.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/domain/constants.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/constants.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/objects/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/objects/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/objects/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/logic/doSomething.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/logic/doSomething.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/logic/doSomething.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/model/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/model/**/*.ts",
        "practiceRef": "directory-structure-src.bad-practice.model-dir",
        "purpose": "BAD_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/model/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/services/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/services/**/*.ts",
        "practiceRef": "directory-structure-src.bad-practice.services-dir",
        "purpose": "BAD_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/services/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should be able to evaluate a practice with wildcard glob pattern path file checks - passes without optionals 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/contract/handlers/doSomething.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/contract/handlers/doSomething.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/contract/handlers/doSomething.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "import { invokeLambdaFunction } from 'simple-lambda-client';
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/clients/**/*.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/clients/**/*.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "CONTAINS",
      },
    ],
    "path": "src/data/clients/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/data/dao/**/*.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/data/dao/**/*.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/data/dao/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/constants.ts",
          "required": false,
        },
        "fix": null,
        "path": "src/domain/constants.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": false,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/constants.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/domain/objects/index.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/domain/objects/index.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/domain/objects/index.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/logic/doSomething.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/logic/doSomething.ts",
        "practiceRef": "directory-structure-src.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": null,
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/logic/doSomething.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/model/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/model/**/*.ts",
        "practiceRef": "directory-structure-src.bad-practice.model-dir",
        "purpose": "BAD_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/model/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "src/services/**/*.ts",
          "required": true,
        },
        "fix": null,
        "path": "src/services/**/*.ts",
        "practiceRef": "directory-structure-src.bad-practice.services-dir",
        "purpose": "BAD_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "src/services/**/*.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    "result": "PASS",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should ignore the "node_modules" and ".declapract" directory when evaluating glob paths 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": null,
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": "**/*.test.integration.ts",
          "required": true,
        },
        "fix": null,
        "path": "**/*.test.integration.ts",
        "practiceRef": "testing.bad-practice.old-extension-pattern",
        "purpose": "BAD_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "PASS",
        "type": "EXISTS",
      },
    ],
    "path": "**/*.test.integration.ts",
    "practice": PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "**/*.test.integration.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "old-extension-pattern",
          "readme": null,
        },
      ],
      "bestPractice": null,
      "name": "testing",
    },
    "result": "PASS",
  },
]
`;

exports[`evaluteProjectAgainstPracticeDeclaration should include the ".npmrc" file when evaluating glob paths 1`] = `
[
  FilePracticeEvaluation {
    "checks": [
      FileCheckEvaluation {
        "context": FileCheckContext {
          "declaredFileContents": "engine-strict=true
save-exact=true
message=%s 🎉
",
          "getProjectRootDirectory": [Function],
          "projectPractices": [],
          "projectVariables": {},
          "relativeFilePath": ".npmrc",
          "required": true,
        },
        "fix": [Function],
        "path": ".npmrc",
        "practiceRef": "npmrc.best-practice",
        "purpose": "BEST_PRACTICE",
        "reason": "[32m- Expected file to exist[39m
[31m+ Received file does not exist[39m",
        "required": true,
        "result": "FAIL",
        "type": "EQUALS",
      },
    ],
    "path": ".npmrc",
    "practice": PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": [Function],
            "fix": [Function],
            "pathGlob": ".npmrc",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "npmrc",
        "readme": null,
      },
      "name": "npmrc",
    },
    "result": "FAIL",
  },
]
`;
