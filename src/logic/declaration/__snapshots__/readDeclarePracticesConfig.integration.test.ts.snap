// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readDeclarePracticesConfig should be able to read a declared practices from example declarations repo config 1`] = `
{
  "examples": [
    ExampleDeclaration {
      "exampleRootDirectory": "src/examples/lambda-service",
      "name": "lambda-service",
    },
  ],
  "practices": [
    PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": null,
              "pathGlob": "package.json",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "CUSTOM",
            },
          ],
          "name": "moment",
          "readme": "using \`moment\` is a bad practice because it has a weird api that "mutates" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CUSTOM",
          },
        ],
        "name": "dates-and-times",
        "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
      },
      "name": "dates-and-times",
    },
    PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/model/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "src/services/**/*.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/contract/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "import { invokeLambdaFunction } from 'simple-lambda-client';
",
            "fix": [Function],
            "pathGlob": "src/data/clients/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/data/dao/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/constants.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/domain/objects/index.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "src/logic/**/*.ts",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": "*.md
",
            "fix": [Function],
            "pathGlob": ".prettierignore",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "{
  "devDependencies": {
    "prettier": "@declapract{check.minVersion('2.0.0')}"
  },
  "scripts": {
    "format": "prettier --write '**/*.ts' --config ./prettier.config.js"
  }
}
",
            "fix": [Function],
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "// ref: http://json.schemastore.org/prettierrc

module.exports = {
  trailingComma: 'all',
  tabWidth: 2,
  singleQuote: true,
  printWidth: 150,
};
",
            "fix": [Function],
            "pathGlob": "prettier.config.js",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "prettier",
        "readme": null,
      },
      "name": "prettier",
    },
    PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": "@declapract{variable.packageName}
==============

@declapract{variable.packageDescription}

[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)
[![Version](https://img.shields.io/npm/v/@declapract{variable.packageName}.svg)](https://npmjs.org/package/@declapract{variable.packageName})
[![Codecov](https://codecov.io/gh/@declapract{variable.organizationName}/@declapract{variable.packageName}/branch/master/graph/badge.svg)](https://codecov.io/gh/@declapract{variable.organizationName}/@declapract{variable.packageName})
[![Downloads/week](https://img.shields.io/npm/dw/@declapract{variable.packageName}.svg)](https://npmjs.org/package/@declapract{variable.packageName})
[![License](https://img.shields.io/npm/l/@declapract{variable.packageName}.svg)](https://github.com/@declapract{variable.organizationName}/@declapract{variable.packageName}/blob/master/package.json)
",
            "fix": [Function],
            "pathGlob": "README.md",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "readme-for-packages",
        "readme": null,
      },
      "name": "readme-for-packages",
    },
    PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": null,
            "fix": null,
            "pathGlob": "package.json",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CUSTOM",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "service: @declapract{variable.serviceName}

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10
  stage: \${opt:stage}
  stackTags:
    app: @declapract{variable.organizationName}
    environment: \${self:provider.stage}
    product: \${self:service}
  environment:
    SERVERLESS_STAGE: \${self:provider.stage}
    NODE_ENV: \${self:custom.stageToNodeEnvMapping.\${self:provider.stage}}
  deploymentBucket: serverless-deployment-@declapract{variable.infrastructureNamespaceId}-\${self:provider.stage}
  vpc:
    securityGroupIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSecurityGroupId}
    subnetIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet1Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet2Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet3Id}
  iamRoleStatements:
    ## paramstore access
    - Effect: 'Allow'
      Action: 'ssm:DescribeParameters'
      Resource: '*'
    - Effect: 'Allow'
      Action: 'ssm:GetParameters'
      Resource: arn:aws:ssm:\${aws:region}:\${aws:accountId}:parameter/*
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource: arn:aws:kms:\${aws:region}:\${aws:accountId}:alias/aws/ssm*
    ## allow invocation of other lambdas
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

custom:
  stageToNodeEnvMapping:
    test: 'test'
    dev: 'development'
    prod: 'production'

functions:
",
            "fix": [Function],
            "pathGlob": "serverless.yml",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
        ],
        "name": "serverless",
        "readme": null,
      },
      "name": "serverless",
    },
    PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": ".terraform
",
            "fix": [Function],
            "pathGlob": ".gitignore",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "0.14.11
",
            "fix": [Function],
            "pathGlob": ".terraform-version",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "provider "aws" {
  region = "us-east-1"
}
",
            "fix": [Function],
            "pathGlob": "provision/terraform/environments/dev/main.tf",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "terraform {
  required_version = ">= 0.14"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "3.53.0"
    }
  }
}
",
            "fix": [Function],
            "pathGlob": "provision/terraform/environments/dev/versions.tf",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "provider "aws" {
  region = "us-east-1"
}
",
            "fix": [Function],
            "pathGlob": "provision/terraform/environments/prod/main.tf",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "CONTAINS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "terraform {
  required_version = ">= 0.14"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "3.53.0"
    }
  }
}
",
            "fix": [Function],
            "pathGlob": "provision/terraform/environments/prod/versions.tf",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
          FileCheckDeclaration {
            "check": [Function],
            "contents": "variable "environment" {}

locals {
  service = "@declapract{variable.serviceName}"
}

locals {
  tags = {
    app         = "@declapract{variable.organizationName}"
    environment = var.environment
    product     = local.service
  }
}
",
            "fix": [Function],
            "pathGlob": "provision/terraform/product/variables.tf",
            "purpose": "BEST_PRACTICE",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "name": "terraform",
        "readme": "best pattern found for terraform so far is to put different environments into their own directory - and just have them reference a shared product dir
",
      },
      "name": "terraform",
    },
    PracticeDeclaration {
      "badPractices": [
        ProjectCheckDeclaration {
          "checks": [
            FileCheckDeclaration {
              "check": [Function],
              "contents": null,
              "fix": [Function],
              "pathGlob": "**/*.test.integration.ts",
              "purpose": "BAD_PRACTICE",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "name": "old-extension-pattern",
          "readme": null,
        },
      ],
      "bestPractice": null,
      "name": "testing",
    },
    PracticeDeclaration {
      "badPractices": [],
      "bestPractice": ProjectCheckDeclaration {
        "checks": [
          FileCheckDeclaration {
            "check": [Function],
            "contents": "export const sleep = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));
",
            "fix": [Function],
            "pathGlob": "src/**/sleep.ts",
            "purpose": "BEST_PRACTICE",
            "required": false,
            "type": "EQUALS",
          },
        ],
        "name": "util-sleep",
        "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
      },
      "name": "util-sleep",
    },
  ],
  "rootDir": Any<String>,
  "useCases": [
    UseCaseDeclaration {
      "example": null,
      "name": "typescript",
      "practices": [
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": "*.md
",
                "fix": [Function],
                "pathGlob": ".prettierignore",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "{
  "devDependencies": {
    "prettier": "@declapract{check.minVersion('2.0.0')}"
  },
  "scripts": {
    "format": "prettier --write '**/*.ts' --config ./prettier.config.js"
  }
}
",
                "fix": [Function],
                "pathGlob": "package.json",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "// ref: http://json.schemastore.org/prettierrc

module.exports = {
  trailingComma: 'all',
  tabWidth: 2,
  singleQuote: true,
  printWidth: 150,
};
",
                "fix": [Function],
                "pathGlob": "prettier.config.js",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
            ],
            "name": "prettier",
            "readme": null,
          },
          "name": "prettier",
        },
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": "export const sleep = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));
",
                "fix": [Function],
                "pathGlob": "src/**/sleep.ts",
                "purpose": "BEST_PRACTICE",
                "required": false,
                "type": "EQUALS",
              },
            ],
            "name": "util-sleep",
            "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
          },
          "name": "util-sleep",
        },
      ],
    },
    UseCaseDeclaration {
      "example": ExampleDeclaration {
        "exampleRootDirectory": "src/examples/lambda-service",
        "name": "lambda-service",
      },
      "name": "lambda-service",
      "practices": [
        PracticeDeclaration {
          "badPractices": [
            ProjectCheckDeclaration {
              "checks": [
                FileCheckDeclaration {
                  "check": [Function],
                  "contents": null,
                  "fix": null,
                  "pathGlob": "package.json",
                  "purpose": "BAD_PRACTICE",
                  "required": true,
                  "type": "CUSTOM",
                },
              ],
              "name": "moment",
              "readme": "using \`moment\` is a bad practice because it has a weird api that "mutates" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
            },
          ],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": null,
                "fix": null,
                "pathGlob": "package.json",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CUSTOM",
              },
            ],
            "name": "dates-and-times",
            "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
          },
          "name": "dates-and-times",
        },
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": null,
                "fix": null,
                "pathGlob": "package.json",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CUSTOM",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "service: @declapract{variable.serviceName}

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10
  stage: \${opt:stage}
  stackTags:
    app: @declapract{variable.organizationName}
    environment: \${self:provider.stage}
    product: \${self:service}
  environment:
    SERVERLESS_STAGE: \${self:provider.stage}
    NODE_ENV: \${self:custom.stageToNodeEnvMapping.\${self:provider.stage}}
  deploymentBucket: serverless-deployment-@declapract{variable.infrastructureNamespaceId}-\${self:provider.stage}
  vpc:
    securityGroupIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSecurityGroupId}
    subnetIds:
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet1Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet2Id}
      - \${ssm:/tf/infrastructure/vpc/main/lambdaSubnet3Id}
  iamRoleStatements:
    ## paramstore access
    - Effect: 'Allow'
      Action: 'ssm:DescribeParameters'
      Resource: '*'
    - Effect: 'Allow'
      Action: 'ssm:GetParameters'
      Resource: arn:aws:ssm:\${aws:region}:\${aws:accountId}:parameter/*
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource: arn:aws:kms:\${aws:region}:\${aws:accountId}:alias/aws/ssm*
    ## allow invocation of other lambdas
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'

custom:
  stageToNodeEnvMapping:
    test: 'test'
    dev: 'development'
    prod: 'production'

functions:
",
                "fix": [Function],
                "pathGlob": "serverless.yml",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
            ],
            "name": "serverless",
            "readme": null,
          },
          "name": "serverless",
        },
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": ".terraform
",
                "fix": [Function],
                "pathGlob": ".gitignore",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "0.14.11
",
                "fix": [Function],
                "pathGlob": ".terraform-version",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "provider "aws" {
  region = "us-east-1"
}
",
                "fix": [Function],
                "pathGlob": "provision/terraform/environments/dev/main.tf",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "terraform {
  required_version = ">= 0.14"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "3.53.0"
    }
  }
}
",
                "fix": [Function],
                "pathGlob": "provision/terraform/environments/dev/versions.tf",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "provider "aws" {
  region = "us-east-1"
}
",
                "fix": [Function],
                "pathGlob": "provision/terraform/environments/prod/main.tf",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "terraform {
  required_version = ">= 0.14"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "3.53.0"
    }
  }
}
",
                "fix": [Function],
                "pathGlob": "provision/terraform/environments/prod/versions.tf",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "variable "environment" {}

locals {
  service = "@declapract{variable.serviceName}"
}

locals {
  tags = {
    app         = "@declapract{variable.organizationName}"
    environment = var.environment
    product     = local.service
  }
}
",
                "fix": [Function],
                "pathGlob": "provision/terraform/product/variables.tf",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
            ],
            "name": "terraform",
            "readme": "best pattern found for terraform so far is to put different environments into their own directory - and just have them reference a shared product dir
",
          },
          "name": "terraform",
        },
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": "*.md
",
                "fix": [Function],
                "pathGlob": ".prettierignore",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "{
  "devDependencies": {
    "prettier": "@declapract{check.minVersion('2.0.0')}"
  },
  "scripts": {
    "format": "prettier --write '**/*.ts' --config ./prettier.config.js"
  }
}
",
                "fix": [Function],
                "pathGlob": "package.json",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "CONTAINS",
              },
              FileCheckDeclaration {
                "check": [Function],
                "contents": "// ref: http://json.schemastore.org/prettierrc

module.exports = {
  trailingComma: 'all',
  tabWidth: 2,
  singleQuote: true,
  printWidth: 150,
};
",
                "fix": [Function],
                "pathGlob": "prettier.config.js",
                "purpose": "BEST_PRACTICE",
                "required": true,
                "type": "EQUALS",
              },
            ],
            "name": "prettier",
            "readme": null,
          },
          "name": "prettier",
        },
        PracticeDeclaration {
          "badPractices": [],
          "bestPractice": ProjectCheckDeclaration {
            "checks": [
              FileCheckDeclaration {
                "check": [Function],
                "contents": "export const sleep = (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));
",
                "fix": [Function],
                "pathGlob": "src/**/sleep.ts",
                "purpose": "BEST_PRACTICE",
                "required": false,
                "type": "EQUALS",
              },
            ],
            "name": "util-sleep",
            "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
          },
          "name": "util-sleep",
        },
      ],
    },
  ],
}
`;
