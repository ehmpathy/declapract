// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readUseCaseDeclarations should get the declarations correctly 1`] = `
Array [
  UseCaseDeclaration {
    "example": null,
    "name": "typescript",
    "practices": Array [
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": ".prettierignore",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "package.json",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "prettier.config.js",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
          ],
          "name": "prettier",
          "readme": null,
        },
        "name": "prettier",
      },
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "src/**/sleep.ts",
              "purpose": "BEST_PRACTICE",
              "required": false,
              "type": "EQUALS",
            },
          ],
          "name": "util-sleep",
          "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
        },
        "name": "util-sleep",
      },
    ],
  },
  UseCaseDeclaration {
    "example": ExampleDeclaration {
      "exampleRootDirectory": "src/examples/lambda-service",
      "name": "lambda-service",
    },
    "name": "lambda-service",
    "practices": Array [
      PracticeDeclaration {
        "badPractices": Array [
          ProjectCheckDeclaration {
            "checks": Array [
              FileCheckDeclaration {
                "check": [Function],
                "fix": null,
                "pathGlob": "package.json",
                "purpose": "BAD_PRACTICE",
                "required": true,
                "type": "CUSTOM",
              },
            ],
            "name": "moment",
            "readme": "using \`moment\` is a bad practice because it has a weird api that \\"mutates\\" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
          },
        ],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": null,
              "pathGlob": "package.json",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CUSTOM",
            },
          ],
          "name": "dates-and-times",
          "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
        },
        "name": "dates-and-times",
      },
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": null,
              "pathGlob": "package.json",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CUSTOM",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "serverless.yml",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
          ],
          "name": "serverless",
          "readme": null,
        },
        "name": "serverless",
      },
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": ".gitignore",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": ".terraform-version",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "provision/terraform/product/variables.tf",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "provision/terraform/environments/dev/main.tf",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "provision/terraform/environments/dev/versions.tf",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "provision/terraform/environments/prod/main.tf",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "provision/terraform/environments/prod/versions.tf",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
          ],
          "name": "terraform",
          "readme": "best pattern found for terraform so far is to put different environments into their own directory - and just have them reference a shared product dir
",
        },
        "name": "terraform",
      },
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": ".prettierignore",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "package.json",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "CONTAINS",
            },
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "prettier.config.js",
              "purpose": "BEST_PRACTICE",
              "required": true,
              "type": "EQUALS",
            },
          ],
          "name": "prettier",
          "readme": null,
        },
        "name": "prettier",
      },
      PracticeDeclaration {
        "badPractices": Array [],
        "bestPractice": ProjectCheckDeclaration {
          "checks": Array [
            FileCheckDeclaration {
              "check": [Function],
              "fix": [Function],
              "pathGlob": "src/**/sleep.ts",
              "purpose": "BEST_PRACTICE",
              "required": false,
              "type": "EQUALS",
            },
          ],
          "name": "util-sleep",
          "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
        },
        "name": "util-sleep",
      },
    ],
  },
]
`;
