// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readPracticeDeclarationFromDirectory should define correctly when a bad-practice is defined 1`] = `
PracticeDeclaration {
  "badPractices": Array [
    ProjectCheckDeclaration {
      "checks": Array [
        FileCheckDeclaration {
          "check": [Function],
          "contents": null,
          "fix": null,
          "pathGlob": "package.json",
          "purpose": "BAD_PRACTICE",
          "required": true,
          "type": "CUSTOM",
        },
      ],
      "name": "moment",
      "readme": "using \`moment\` is a bad practice because it has a weird api that \\"mutates\\" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
    },
  ],
  "bestPractice": ProjectCheckDeclaration {
    "checks": Array [
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "package.json",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "CUSTOM",
      },
    ],
    "name": "dates-and-times",
    "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
  },
  "name": "dates-and-times",
}
`;

exports[`readPracticeDeclarationFromDirectory should define correctly when best and bad practices are defined 1`] = `
PracticeDeclaration {
  "badPractices": Array [
    ProjectCheckDeclaration {
      "checks": Array [
        FileCheckDeclaration {
          "check": [Function],
          "contents": null,
          "fix": [Function],
          "pathGlob": "src/model/**/*.ts",
          "purpose": "BAD_PRACTICE",
          "required": true,
          "type": "EXISTS",
        },
      ],
      "name": "model-dir",
      "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
    },
    ProjectCheckDeclaration {
      "checks": Array [
        FileCheckDeclaration {
          "check": [Function],
          "contents": null,
          "fix": [Function],
          "pathGlob": "src/services/**/*.ts",
          "purpose": "BAD_PRACTICE",
          "required": true,
          "type": "EXISTS",
        },
      ],
      "name": "services-dir",
      "readme": null,
    },
  ],
  "bestPractice": ProjectCheckDeclaration {
    "checks": Array [
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/contract/**/*.ts",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EXISTS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": "import { invokeLambdaFunction } from 'simple-lambda-client';
",
        "fix": [Function],
        "pathGlob": "src/data/clients/**/*.ts",
        "purpose": "BEST_PRACTICE",
        "required": false,
        "type": "CONTAINS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/data/dao/**/*.ts",
        "purpose": "BEST_PRACTICE",
        "required": false,
        "type": "EXISTS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/domain/constants.ts",
        "purpose": "BEST_PRACTICE",
        "required": false,
        "type": "EXISTS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/domain/index.ts",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EXISTS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/domain/objects/index.ts",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EXISTS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": null,
        "fix": null,
        "pathGlob": "src/logic/**/*.ts",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EXISTS",
      },
    ],
    "name": "directory-structure-src",
    "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
  },
  "name": "directory-structure-src",
}
`;

exports[`readPracticeDeclarationFromDirectory should define correctly when only the best-practice is defined 1`] = `
PracticeDeclaration {
  "badPractices": Array [],
  "bestPractice": ProjectCheckDeclaration {
    "checks": Array [
      FileCheckDeclaration {
        "check": [Function],
        "contents": "export const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
",
        "fix": [Function],
        "pathGlob": "src/**/sleep.ts",
        "purpose": "BEST_PRACTICE",
        "required": false,
        "type": "EQUALS",
      },
    ],
    "name": "util-sleep",
    "readme": "checks that if a file named \`sleep.ts\` exists, then it must match the proper definition for our sleep utility, defined as a best practice

optional check => if you dont need \`sleep.ts\`, dont define the file

helpful in that:
- it makes sure your definition of sleep is correct
- you can just define an empty file called \`sleep.ts\` and then run \`declapract fix --practice:util-sleep\` and it will fill it out for you
",
  },
  "name": "util-sleep",
}
`;

exports[`readPracticeDeclarationFromDirectory should still have the fix functions defined on the file checks 1`] = `
PracticeDeclaration {
  "badPractices": Array [],
  "bestPractice": ProjectCheckDeclaration {
    "checks": Array [
      FileCheckDeclaration {
        "check": [Function],
        "contents": "*.md
",
        "fix": [Function],
        "pathGlob": ".prettierignore",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EQUALS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": "{
  \\"devDependencies\\": {
    \\"prettier\\": \\"@declapract{check.minVersion('2.0.0')}\\"
  },
  \\"scripts\\": {
    \\"format\\": \\"prettier --write '**/*.ts' --config ./prettier.config.js\\"
  }
}
",
        "fix": [Function],
        "pathGlob": "package.json",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "CONTAINS",
      },
      FileCheckDeclaration {
        "check": [Function],
        "contents": "// ref: http://json.schemastore.org/prettierrc

module.exports = {
  trailingComma: 'all',
  tabWidth: 2,
  singleQuote: true,
  printWidth: 150,
};
",
        "fix": [Function],
        "pathGlob": "prettier.config.js",
        "purpose": "BEST_PRACTICE",
        "required": true,
        "type": "EQUALS",
      },
    ],
    "name": "prettier",
    "readme": null,
  },
  "name": "prettier",
}
`;
