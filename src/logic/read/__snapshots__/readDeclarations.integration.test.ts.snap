// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readDeclarations should get the declarations correctly 1`] = `
Object {
  "practices": Array [
    PracticeDeclaration {
      "badPractices": Array [
        CheckProjectDeclaration {
          "checks": Array [
            CheckFileDeclaration {
              "check": [Function],
              "fix": null,
              "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/bad-practices/moment/package.json",
              "required": true,
              "type": "CUSTOM",
            },
          ],
          "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/bad-practices/moment",
          "name": "moment",
          "readme": "using \`moment\` is a bad practice because it has a weird api that \\"mutates\\" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
        },
      ],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/best-practice/package.json",
            "required": true,
            "type": "CUSTOM",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/best-practice",
        "name": "dates-and-times",
        "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
      },
      "name": "dates-and-times",
    },
    PracticeDeclaration {
      "badPractices": Array [
        CheckProjectDeclaration {
          "checks": Array [
            CheckFileDeclaration {
              "check": [Function],
              "fix": null,
              "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/bad-practices/model-dir/src/model/**/*",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/bad-practices/model-dir",
          "name": "model-dir",
          "readme": "we use \`domain\` directory instead of \`model\` directory
- model directory was what we originally went with, but realized \`domain\` was more explicit and better represented what we were going after
",
        },
        CheckProjectDeclaration {
          "checks": Array [
            CheckFileDeclaration {
              "check": [Function],
              "fix": null,
              "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/bad-practices/services-dir/src/services/**/*",
              "required": true,
              "type": "EXISTS",
            },
          ],
          "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/bad-practices/services-dir",
          "name": "services-dir",
          "readme": null,
        },
      ],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/contract/**/*",
            "required": true,
            "type": "EXISTS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/data/clients/**/*.ts",
            "required": false,
            "type": "CONTAINS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/data/dao/**/*.ts",
            "required": false,
            "type": "EXISTS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/domain/constants",
            "required": false,
            "type": "EXISTS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/domain/index",
            "required": true,
            "type": "EXISTS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/domain/objects/index",
            "required": true,
            "type": "EXISTS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice/src/logic/**/*.ts",
            "required": true,
            "type": "EXISTS",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/directory-structure-src/best-practice",
        "name": "directory-structure-src",
        "readme": "layers to a project:
- contract layer
  - summary: responsible for strictly exposing the logic/domain defined in the service
  - responsibilities:
    - specifies the inputs and outputs
    - normalizes inputs on behalf of user
    - validates the inputs
    - normalizes outputs on behalf of service
- domain layer
  - summary: defines the domain which this service masters
  - responsibilities:
    - specify domain objects
    - specify constants
- logic layer
  - summary: defines the business logic that this service manages
  - responsibilities:
    - define the business logic of the domain in an organized and maintainable way
- data layer:
  - summary: defines how to persist data / leverage third party clients
  - responsibilities:
    - daos
    - clients
",
      },
      "name": "directory-structure-src",
    },
    PracticeDeclaration {
      "badPractices": Array [],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/.prettierignore",
            "required": true,
            "type": "EQUALS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/package.json",
            "required": true,
            "type": "CUSTOM",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/prettier.config.js",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice",
        "name": "prettier",
        "readme": null,
      },
      "name": "prettier",
    },
    PracticeDeclaration {
      "badPractices": Array [],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice/package.json",
            "required": true,
            "type": "CUSTOM",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice/serverless.yml",
            "required": true,
            "type": "CONTAINS",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice",
        "name": "serverless",
        "readme": null,
      },
      "name": "serverless",
    },
    PracticeDeclaration {
      "badPractices": Array [],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/.gitignore",
            "required": true,
            "type": "CONTAINS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/.terraform-version",
            "required": true,
            "type": "EQUALS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/provision/terraform/environments/dev/main.tf",
            "required": true,
            "type": "CONTAINS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/provision/terraform/environments/dev/versions.tf",
            "required": true,
            "type": "EQUALS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": null,
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/provision/terraform/environments/prod/main.tf",
            "required": true,
            "type": "CONTAINS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/provision/terraform/environments/prod/versions.tf",
            "required": true,
            "type": "EQUALS",
          },
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice/provision/terraform/product/variables.tf",
            "required": true,
            "type": "EQUALS",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/terraform/best-practice",
        "name": "terraform",
        "readme": "best pattern found for terraform so far is to put different environments into their own directory - and just have them reference a shared product dir
",
      },
      "name": "terraform",
    },
    PracticeDeclaration {
      "badPractices": Array [],
      "bestPractice": CheckProjectDeclaration {
        "checks": Array [
          CheckFileDeclaration {
            "check": [Function],
            "fix": [Function],
            "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/util-sleep/best-practice/src/utils/sleep.ts",
            "required": false,
            "type": "EQUALS",
          },
        ],
        "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/util-sleep/best-practice",
        "name": "util-sleep",
        "readme": null,
      },
      "name": "util-sleep",
    },
  ],
  "useCases": Array [
    UseCaseDeclaration {
      "name": "lambda-service",
      "practices": Array [
        PracticeDeclaration {
          "badPractices": Array [
            CheckProjectDeclaration {
              "checks": Array [
                CheckFileDeclaration {
                  "check": [Function],
                  "fix": null,
                  "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/bad-practices/moment/package.json",
                  "required": true,
                  "type": "CUSTOM",
                },
              ],
              "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/bad-practices/moment",
              "name": "moment",
              "readme": "using \`moment\` is a bad practice because it has a weird api that \\"mutates\\" values

for example:
\`\`\`ts
const a = moment();
const b = a.addHours(7);
expect(b.toISOString()).not.toEqual(a.toISOString()); // this will fail, since moment actually both returns \`b\` _and_ mutates \`a\`...
\`\`\`

",
            },
          ],
          "bestPractice": CheckProjectDeclaration {
            "checks": Array [
              CheckFileDeclaration {
                "check": [Function],
                "fix": null,
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/best-practice/package.json",
                "required": true,
                "type": "CUSTOM",
              },
            ],
            "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/dates-and-times/best-practice",
            "name": "dates-and-times",
            "readme": "\`date-fns\` is a great library for manipulating dates and times in a functional, immutable, declarative pattern
",
          },
          "name": "dates-and-times",
        },
        PracticeDeclaration {
          "badPractices": Array [],
          "bestPractice": CheckProjectDeclaration {
            "checks": Array [
              CheckFileDeclaration {
                "check": [Function],
                "fix": [Function],
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/.prettierignore",
                "required": true,
                "type": "EQUALS",
              },
              CheckFileDeclaration {
                "check": [Function],
                "fix": null,
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/package.json",
                "required": true,
                "type": "CUSTOM",
              },
              CheckFileDeclaration {
                "check": [Function],
                "fix": [Function],
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice/prettier.config.js",
                "required": true,
                "type": "EQUALS",
              },
            ],
            "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/prettier/best-practice",
            "name": "prettier",
            "readme": null,
          },
          "name": "prettier",
        },
        PracticeDeclaration {
          "badPractices": Array [],
          "bestPractice": CheckProjectDeclaration {
            "checks": Array [
              CheckFileDeclaration {
                "check": [Function],
                "fix": null,
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice/package.json",
                "required": true,
                "type": "CUSTOM",
              },
              CheckFileDeclaration {
                "check": [Function],
                "fix": null,
                "path": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice/serverless.yml",
                "required": true,
                "type": "CONTAINS",
              },
            ],
            "dir": "/home/uladkasach/git/more/declapract/src/logic/read/../__test_assets__/exampleDeclarations/practices/serverless/best-practice",
            "name": "serverless",
            "readme": null,
          },
          "name": "serverless",
        },
      ],
    },
  ],
}
`;
